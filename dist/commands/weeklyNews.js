// src/commands/weeklyNews.ts
import { DateTime } from "luxon";
import { pool } from "../db.js";
import { scrapeAllEvents, } from "../services/calendar/scrape.js";
/* ====== –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–æ–≤ ====== */
const LOG_LEVEL = process.env.LOG_LEVEL ?? "info";
const info = (...a) => console.log("[INFO]", ...a);
const debug = (...a) => LOG_LEVEL === "debug" && console.log("[DEBUG]", ...a);
/* —ç–º–æ–¥–∑–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ */
const mark = ["üü¢", "üü°", "üî¥"];
/* –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ ISO-–∫–æ–¥—ã —è–∑—ã–∫–æ–≤ –¥–ª—è –ª–æ–∫–∞–ª–µ–π */
const ISO = {
    it: true, zh: true, ru: true, es: true, pl: true, tr: true, ja: true,
    pt: true, da: true, fa: true, ko: true, fr: true, no: true, id: true,
    de: true, hu: true, ar: true, sv: true,
};
/** –§–ª–∞–≥ –ø–æ –∫–æ–¥—É –≤–∞–ª—é—Ç—ã */
function currencyFlag(cur) {
    const map = {
        USD: "üá∫üá∏", EUR: "üá™üá∫", CAD: "üá®üá¶", GBP: "üá¨üáß",
        JPY: "üáØüáµ", AUD: "üá¶üá∫", NZD: "üá≥üáø", CHF: "üá®üá≠", CNY: "üá®üá≥",
    };
    return map[cur] || "";
}
/** –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º */
function currencyName(cur) {
    const map = {
        USD: "–°–®–ê", EUR: "–ï–°", CAD: "–ö–∞–Ω–∞–¥–∞", GBP: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
        JPY: "–Ø–ø–æ–Ω–∏—è", AUD: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", NZD: "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è",
        CHF: "–®–≤–µ–π—Ü–∞—Ä–∏—è", CNY: "–ö–∏—Ç–∞–π",
    };
    return map[cur] || cur;
}
async function getPrefs(tgId) {
    const { rows } = await pool.query("SELECT tz_id, importance, lang FROM user_settings WHERE tg_id=$1", [tgId]);
    return rows[0] ?? null;
}
/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫‚Äî–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –≤ UTC,
 * –∞ –º—ã –ø–æ—Ç–æ–º –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏—Ö –≤ —Ç–∞–π–º–∑–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
async function getWeekEvents(lang, tz) {
    const all = await scrapeAllEvents();
    const today = DateTime.utc().setZone(tz);
    const weekStart = today.startOf("week").toUTC();
    const weekEnd = today.endOf("week").toUTC();
    return all.filter(e => {
        if (!e.timestamp)
            return false;
        const ts = DateTime.fromISO(e.timestamp, { zone: "utc" });
        return ts >= weekStart && ts <= weekEnd;
    });
}
/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–º–∞–Ω–¥–∞ /weekly_news ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export function weeklyNewsCommand(bot) {
    bot.command("weekly_news", async (ctx) => {
        const uid = ctx.from.id;
        const pref = await getPrefs(uid);
        if (!pref)
            return ctx.reply("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start üôÇ");
        const lang = ISO[pref.lang] ? pref.lang : "en";
        let raw;
        try {
            raw = await getWeekEvents(lang, pref.tz_id);
        }
        catch (err) {
            console.error("[calendar scrape]", err);
            return ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        const events = raw
            .filter((e) => e.importance >= pref.importance && e.timestamp != null)
            .sort((a, b) => a.timestamp < b.timestamp ? -1 : 1);
        info(`/weekly_news ${uid}: scraped=${raw.length}, shown=${events.length}`);
        if (LOG_LEVEL === "debug") {
            const dropped = raw.filter(e => e.importance < pref.importance || !e.timestamp);
            debug("Dropped:", dropped.length, JSON.stringify(dropped, null, 2));
        }
        if (!events.length) {
            return ctx.reply("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç üôÇ");
        }
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ
        const grouped = {};
        for (const e of events) {
            const local = DateTime.fromISO(e.timestamp, { zone: "utc" })
                .setZone(pref.tz_id);
            const key = local.toISODate(); // yyyy-MM-dd
            (grouped[key] ??= []).push(e);
        }
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const weekStart = DateTime.utc().setZone(pref.tz_id).startOf("week");
        const weekEnd = DateTime.utc().setZone(pref.tz_id).endOf("week");
        const header = `<b>–ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ–¥–µ–ª–∏</b> ` +
            `(${weekStart.toFormat("dd.LL.yyyy")} ‚Äî ${weekEnd.toFormat("dd.LL.yyyy")}, ${pref.tz_id})`;
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        const lines = [header];
        for (let i = 0; i < 7; i++) {
            const day = weekStart.plus({ days: i });
            const iso = day.toISODate();
            const dayName = day.setLocale("ru").toFormat("cccc");
            const dateStr = day.toFormat("dd.LL.yyyy");
            lines.push(`\n<b>${dayName.charAt(0).toUpperCase() + dayName.slice(1)} ‚Äî ${dateStr} (UTC${day.toFormat("ZZ")}):</b>`);
            const evs = grouped[iso] ?? [];
            if (!evs.length) {
                lines.push("–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
            }
            else {
                for (const e of evs) {
                    const t = DateTime.fromISO(e.timestamp, { zone: "utc" })
                        .setZone(pref.tz_id)
                        .toFormat("HH:mm");
                    lines.push(`${mark[e.importance - 1]} ${currencyFlag(e.currency)} ` +
                        `${currencyName(e.currency)} ‚Äî ${e.title} ‚Äî ${t}`);
                }
            }
        }
        // –ü–æ–¥–ø–∏—Å—å –≤ –∫–æ–Ω—Ü–µ
        lines.push("\n_____________________________");
        lines.push("by Ksavdev");
        await ctx.reply(lines.join("\n"), {
            parse_mode: "HTML",
            link_preview_options: { is_disabled: true },
        });
    });
}
