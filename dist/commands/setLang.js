"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLangCommand = setLangCommand;
const grammy_1 = require("grammy");
const user_service_js_1 = require("../services/user.service.js");
function setLangCommand(bot) {
    /* –º–µ–Ω—é —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ */
    const kb = new grammy_1.InlineKeyboard()
        .text("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_ru")
        .text("üá¨üáß English", "lang_en");
    /* /set_lang ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é */
    bot.command("set_lang", (ctx) => ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:", { reply_markup: kb }));
    /* –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π */
    bot.callbackQuery(/lang_(ru|en)/, async (ctx) => {
        const lang = ctx.match[1];
        await (0, user_service_js_1.setLanguage)(ctx.from.id, lang);
        const label = lang === "ru" ? "–†—É—Å—Å–∫–∏–π" : "English";
        await ctx.answerCallbackQuery({ text: `–°–æ—Ö—Ä–∞–Ω—ë–Ω —è–∑—ã–∫: ${label}`, show_alert: true });
        await ctx.editMessageText(`‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: ${label}`, {
            reply_markup: { inline_keyboard: [] },
        });
    });
}
