import { Composer, InlineKeyboard } from 'grammy';
import { BotCtx } from '@/core/bot';
import { setImportance } from '@/features/user/services/user.service';

export function registerSetNewsTypeCommand(composer: Composer<BotCtx>) {
    const kb = new InlineKeyboard()
        .text('üü¢ 1', 'nt_1')
        .text('üü° 2', 'nt_2')
        .text('üî¥ 3', 'nt_3');

    composer.command('set_news_type', async (ctx) => {
        const argRaw = ctx.message?.text.split(' ')[1];
        const argNum = Number(argRaw);

        if ([1, 2, 3].includes(argNum as 1 | 2 | 3)) {
            await setImportance(ctx.from!.id, argNum as 1 | 2 | 3);
            return ctx.reply(`‚úÖ –ë—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–æ–±—ã—Ç–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ ‚â• ${argNum}`);
        }

        await ctx.reply('–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å?', {
            reply_markup: kb,
        });
    });

    composer.callbackQuery(/nt_(\d)/, async (ctx) => {
        const level = Number(ctx.match![1]) as 1 | 2 | 3;
        await setImportance(ctx.from!.id, level);
        await ctx.editMessageText(`‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª: –≤–∞–∂–Ω–æ—Å—Ç—å ‚â• ${level}`);
        await ctx.answerCallbackQuery();
    });
}